class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        //1st Approach
        // vector<int> v;
        // for(int i=0;i<nums.size();i++){
        //     int sum=0;
        //     for(int j=i+1;j<nums.size();j++){
        //         sum=nums[i]+nums[j];
        //         if(sum==target){
        //             v.push_back(i);
        //             v.push_back(j);
        //             break;
        //         }
        //     }
        //     if(sum==target){
        //         break;
        //     }
        // }
        //return v;


        //2nd approach using hashmap
            // map<int,int> m;
            // for(int i=0;i<nums.size();i++){
            //     int other=target- nums[i];
            //     if(m.find(other)!=m.end()){
            //         return {i,m[other]};
            //     }
            //     m[nums[i]]=i;
            // }

        // return {};

        //TWO POINTER APPROACh
        vector<pair<int,int>> v1;
        for(int i=0;i<nums.size();i++){
            v1.push_back({nums[i],i});
        }
        sort(v1.begin(),v1.end());
        
        int l=0;
        int r=nums.size()-1;
        vector<int> v;
        while(l<r){
            int sum=v1[l].first+v1[r].first;
            if(sum<target){
                l++;
            }
            else if(sum>target){
                r--;
            }
            else if(sum==target){
                v.push_back(v1[l].second); 
                v.push_back(v1[r].second); 
                break;
            }
        }
        return v;
    }
};
